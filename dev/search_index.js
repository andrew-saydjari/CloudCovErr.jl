var documenterSearchIndex = {"docs":
[{"location":"#cloudCovErr.jl-Documentation","page":"cloudCovErr.jl Documentation","title":"cloudCovErr.jl Documentation","text":"","category":"section"},{"location":"","page":"cloudCovErr.jl Documentation","title":"cloudCovErr.jl Documentation","text":"","category":"page"},{"location":"","page":"cloudCovErr.jl Documentation","title":"cloudCovErr.jl Documentation","text":"CurrentModule = cloudCovErr","category":"page"},{"location":"","page":"cloudCovErr.jl Documentation","title":"cloudCovErr.jl Documentation","text":"Modules = [cloudCovErr]\nOrder   = [:function, :type]","category":"page"},{"location":"#cloudCovErr.add_sky_noise!-NTuple{4, Any}","page":"cloudCovErr.jl Documentation","title":"cloudCovErr.add_sky_noise!","text":"add_sky_noise!(testim2,maskim0,skyim3,gain;seed=2021)\n\nAdds noise to the infill that matches the Poisson noise of a rough estimate for the sky background. A random seed to set a local random generator is provided for reproducible unit testing.\n\nArguments:\n\ntestim2: input image which had infilling\nmaskim0: mask of pixels which were infilled\nskyim3: rough estimate of sky background counts\ngain: gain of detector to convert from photon count noise to detector noise\nseed: random seed for random generator\n\n\n\n\n\n","category":"method"},{"location":"#cloudCovErr.boxsmooth!-Union{Tuple{T}, Tuple{AbstractArray, AbstractArray, Vector{T}, Int64, Int64}} where T","page":"cloudCovErr.jl Documentation","title":"cloudCovErr.boxsmooth!","text":"boxsmooth!(out, arr, widx::Int, widy::Int, sx::Int, sy::Int)\n\nBoxcar smooths an input image (or paddedview) arr with window size widx by widy. We pass the original image size sx and sy to help handle image views.\n\nArguments:\n\nout: preallocated output array for the boxcar smoothed image\narr: input array for which boxcar smoothing is computed (generally paddedview)\nwidx::Int: size of boxcar smoothing window in x\nwidy::Int: size of boxcar smoothing window in y\nsx::Int: x size of the original (unpadded) image\nsy::Int: y size of the original (unpadded) image\n\n\n\n\n\n","category":"method"},{"location":"#cloudCovErr.condCovEst_wdiag-NTuple{7, Any}","page":"cloudCovErr.jl Documentation","title":"cloudCovErr.condCovEst_wdiag","text":"condCovEst_wdiag(cov_loc,μ,k,kstar,kpsf2d,data_in,data_w,stars_in) -> [std_w std_wdiag var_wdb resid_mean pred_mean chi20]\n\nUsing a local covariance matrix estimate cov_loc and a set of known pixels k and unknown pixels kstar, this function computes a prediction for the mean value of the kstar pixels and the covariance matrix of the kstar pixels. In terms of statistics use to adjust the photometry of a star, we are only interested in the pixels masked as a result of the star (i.e. not a detector defect or cosmic ray nearby) which is kpsf2d. The residual image data_in, the weight image data_w, and a model of the counts above the background coming from the star stars_in for the local patch are also inputs of the function. Correction factors for the photometric flux and flux uncertainities are outputs as well as the chi2 value for the predicted pixels.\n\nArguments:\n\ncov_loc: local covariance matrix\nμ: vector containing mean value for each pixel in the patch\nk: unmasked pixels\nkstar: masked pixels\nkpsf2d: pixels masked due to the star of interest\ndata_in: residual image in local patch\ndata_w: weight image in local patch\nstars_in: image of counts from star alone in local patch\n\n\n\n\n\n","category":"method"},{"location":"#cloudCovErr.cov_avg!-NTuple{4, Any}","page":"cloudCovErr.jl Documentation","title":"cloudCovErr.cov_avg!","text":"cov_avg!(bimage, ism, bism, in_image; Np::Int=33, widx::Int=129, widy::Int=129, ftype::Int=32)\n\nKey function for constructing the (shifted and multiplied) versions of the input image used to quickly estimate the local covariance matrix at a large number of locations. The main output is in the preallocated bism which is used as an input to build_cov!.\n\nArguments:\n\nbimage: preallocated output array for the boxcar smoothed unshifted image\nism: preallocated intermediate array for the input image times itself shifted\nbism: preallocated output array to store boxcar-smoothed image products for all shifts\nin_image: input image the local covariance of which we want to estimate\nNp::Int: size of local covariance matrix in pixels (default 33)\nwidx::Int: width of boxcar window in x which determines size of region used for samples for the local covariance estimate (default 129)\nwidy::Int: width of boxcar window in y which determines size of region used for samples for the local covariance estimate (default 129)\nftype::Int: determine the Float precision, 32 is Float32, otherwise Float64\n\n\n\n\n\n","category":"method"},{"location":"#cloudCovErr.gen_mask_staticPSF!-NTuple{5, Any}","page":"cloudCovErr.jl Documentation","title":"cloudCovErr.gen_mask_staticPSF!","text":"gen_mask_staticPSF!(maskd, psfstamp, x_stars, y_stars, flux_stars, thr=20)\n\nGenerate a mask for an input image (which is usually an image of model residuals) that excludes the cores of stars (which are often mismodeled). In this function, we use a fixed PSF psfstamp for all sources, and adjust the masking fraction based on the stellar flux and a threshold thr. A more general position dependent PSF model could be used with a slight generalization of this function, but is likely overkill for the problem of making a mask.\n\nArguments:\n\nmaskd: bool image to which mask will be added (bitwise or)\npsfstamp: simple 2D array of a single PSF to be used for the whole image\nx_stars: list of source x positions\ny_stars: list of source y positions\nflux_stars: list of source fluxes\nthr: threshold used for flux-dependent masking\n\n\n\n\n\n","category":"method"},{"location":"#cloudCovErr.outest_bounds-Tuple{Any, Any}","page":"cloudCovErr.jl Documentation","title":"cloudCovErr.outest_bounds","text":"outest_bounds(cx,sx)\n\nHelper function to find maximum padding required to accomodate all query points cx outside of the image size 1:sx.\n\nArguments:\n\ncx: list of integer star centers (in either x or y)\nsx: image dimension along the axis indexed by cx\n\n\n\n\n\n","category":"method"},{"location":"#cloudCovErr.prelim_infill!-NTuple{8, Any}","page":"cloudCovErr.jl Documentation","title":"cloudCovErr.prelim_infill!","text":"prelim_infill!(testim,maskim,bimage,bimageI,testim2, maskim2, goodpix; widx = 19, widy=19)\n\nThis intial infill replaces masked pixels with a guess based on a smoothed boxcar. For large masked regions, the smoothing scale is increased. If this iteration takes too long/requires too strong of masking, the masked pixels are replaced with the median of the image.\n\nWe use 3 copies of the input image and mask image. The first is an untouched view (with reflective boundary condition padding), the second is allocated to hold various smoothings of the image, and the third holds the output image which contains our best infill guess. A final bool array of size corresponding to the image is used to keep track of pixels that have safe infill values.\n\nArguments:\n\ntestim: input image which requires infilling\nbimage: preallocated array for smoothed version of input image\ntestim2: inplace modified ouptut array for infilled version of image input\nmaskim: input mask indicating which pixels require infilling\nbimageI: preallocated array for smoothed mask counting the samples for each estimate\nmaskim2: inplace modified mask to keep track of which pixels still need infilling\nwidx::Int: size of boxcar smoothing window in x\nwidy::Int: size of boxcar smoothing window in y\n\n\n\n\n\n","category":"method"},{"location":"#cloudCovErr.stamp_cutter-NTuple{5, Any}","page":"cloudCovErr.jl Documentation","title":"cloudCovErr.stamp_cutter","text":"stamp_cutter(cxx,cyy,residimIn,w_im,mod_im,skyim,maskim;Np=33) -> data_in, data_w, stars_in, kmasked2d\n\nCuts out local stamps around each star of the various input images to be used for per star statistics calculations.\n\nArguments:\n\ncxx: center coorindate x of the stamp\ncyy: center coorindate y of the stamp\nresidimIn: residual image with infilling from which covariance was estimated\nw_im: input weight image\nmod_im: input model image\nskyim: input image of sky background\nmaskim: input image of masked pixels\nNp: size of covariance matrix footprint around each star\n\n\n\n\n\n","category":"method"}]
}
