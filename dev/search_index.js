var documenterSearchIndex = {"docs":
[{"location":"#disCovErr.jl-Documentation","page":"disCovErr.jl Documentation","title":"disCovErr.jl Documentation","text":"","category":"section"},{"location":"","page":"disCovErr.jl Documentation","title":"disCovErr.jl Documentation","text":"","category":"page"},{"location":"","page":"disCovErr.jl Documentation","title":"disCovErr.jl Documentation","text":"CurrentModule = disCovErr","category":"page"},{"location":"","page":"disCovErr.jl Documentation","title":"disCovErr.jl Documentation","text":"Modules = [disCovErr]\nOrder   = [:function, :type]","category":"page"},{"location":"#disCovErr.boxsmoothMod!-Tuple{Any, Any, Int64, Int64, Int64, Int64}","page":"disCovErr.jl Documentation","title":"disCovErr.boxsmoothMod!","text":"boxsmoothMod!(out, arr, widx::Int, widy::Int, sx::Int, sy::Int)\n\nBoxcar smooths an input image (or paddedview) arr with window size widx by widy. We pass the original image size sx and sy to help handle image views.\n\nArguments:\n\nout: preallocated output array for the boxcar smoothed image\narr: input array for which boxcar smoothing is computed (generally paddedview)\nwidx::Int: size of boxcar smoothing window in x\nwidy::Int: size of boxcar smoothing window in y\nsx::Int: x size of the original (unpadded) image\nsy::Int: y size of the original (unpadded) image\n\n\n\n\n\n","category":"method"},{"location":"#disCovErr.cov_construct-Tuple{Any, Any, Any}","page":"disCovErr.jl Documentation","title":"disCovErr.cov_construct","text":"cov_construct(img, cx, cy; Np::Int=33, widx::Int=129, widy::Int=129) -> cov, μ\n\nConstruct a local covariance matrix estimate from img centered around pixel cx and cy. The covariance matrix will be for a square subimage of size Np by Np pixels, yielding cov of size Np^2. The covariance matrix is estimated by taking samples over pixels within a box of size widx and widy centered on the pixel of interest.\n\nIf cx and cy are arrays, the first index of the returned cov will be the index of the center point and μ will be the same length as cx.\n\nIn the interest of speed for the case of wanting to construct the covariance matrix at many posiitons, the moving mean of the full input image (times shifts of the input image) is precomputed for every entry of the covariance matrix. This may not be efficient for few cx.\n\nNote that the values of widx and widy determine how local an estimate the covariance matrix returned is, but for too small of values of widx and widy, the covariance matrix estimate may be singular (one should always keep Np^2 < widx*widy).\n\nArguments:\n\nimg: Input image for which we desire the covariance matrix estimate\ncx: x position (or positions) at which we want a covariance matrix estimate\ncy: y position (or positions) at which we want a covariance matrix estimate\nNp: size of the image stamp for which the covariance matrix will be estimated\nwidx: size of sampled region in x used to estimate entries in the covariance matrix\nwidy: size of sampled region in y used to estimate the entries in the covariance matrix\n\n\n\n\n\n","category":"method"},{"location":"#disCovErr.per_star-Tuple{Any}","page":"disCovErr.jl Documentation","title":"disCovErr.per_star","text":"per_star(ind) -> per_star_stats()\n\nTBD\n\n\n\n\n\n","category":"method"},{"location":"#disCovErr.per_star_stats-NTuple{5, Any}","page":"disCovErr.jl Documentation","title":"disCovErr.per_star_stats","text":"per_star_stats(cov_loc,cxx,cyy,μ,ind) -> per_star_stats()\n\nA bunch o stats\n\n\n\n\n\n","category":"method"}]
}
